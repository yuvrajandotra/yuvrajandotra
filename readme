1.
/***********creating a maven based application using terminal

1. open terminal and type
mvn archetype:generate -DgroupId=com.example -DartifactId=MyMavenApp -DarchetypeArtifactiId=maven-archetype-quickstart -DinteractiveMode=false

2. get into the directory
 cd MyMavenApp
 /MyMAvenApp/gedit pom.xml
// add dependencies from maven central repository
goto chrome --> maven central repository --> search for a particular dependency --> type junit--> it shows the dependency --> scroll up --> click on the recent version and copy the dependency available and paste it in pom.xml under dependencies tag 

// add  plugins to generate jar file and to compile and intimate where to start the application from 

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.example</groupId>
  <artifactId>MyMavenApp</artifactId>
  <packaging>jar</packaging>
  <version>1.0-SNAPSHOT</version>
  
  
  <name>MyMavenApp</name>
  <url>http://maven.apache.org</url>
  
  <!-- Properties: Customize Java version or plugin versions -->
<properties>
<maven.compiler.source>11</maven.compiler.source>
<maven.compiler.target>11</maven.compiler.target>
</properties>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  
  <!-- Build: Configuring plugins and build settings -->
<build>
<plugins>
<!-- Example: Maven Compiler Plugin to compile Java code -->
<plugin>
<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-compiler-plugin</artifactId>
<version>3.8.1</version>
<configuration>
<source>1.7</source>
<target>1.7</target>
</configuration>
</plugin>

<!-- Example: Maven Surefire Plugin to run tests -->
<plugin>
<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-surefire-plugin</artifactId>
<version>2.22.2</version>
</plugin>


<plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-jar-plugin</artifactId>
            <version>3.1.0</version>
            <configuration>
                <archive>
                    <manifestEntries>
                        <Main-Class>com.example.App</Main-Class>
                    </manifestEntries>
                </archive>
            </configuration>
        </plugin>
        
</plugins>
</build>
</project>

3. mvn compile  // compiles the application
4. mvn test
5. mvn package   // generates the jar file
6. java -jar target/MyMaven.....    // run the App.java file and displays the output

OR

mvn clean install
java -jar target/MyMaven.....jar 

st;
public class App 
{
    public static void main( String[] args )
    {
        ImmutableList<String> fruits = ImmutableList.of("Apple", "Banana", "Cherry");
        System.out.println(fruits);
        
        // Define source and destination files
        File sourceFile = new File("source.txt");
        File destFile = new File("destination.txt");

        try {
            // Copy file using Apache Commons IO
            FileUtils.copyFile(sourceFile, destFile);
            System.out.println("File copied successfully!");
        } catch (IOException e) {
            System.err.println("Error occurred while copying file: " + e.getMessage());
        }
    
    }
}


3. mvn clean install
4. java -jar target/MyMaven.....jar   // if it gives error saying class not found, execute the below command
5. mvn exec:java -Dexec.mainClass="com.example.App"
[INFO] Scanning for projects...
[INFO] 
[INFO] --------------------< com.example:MyMavenGuavaApp >---------------------
[INFO] Building MyMavenGuavaApp 1.0-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- exec-maven-plugin:3.5.0:java (default-cli) @ MyMavenGuavaApp ---
[Apple, Banana, Cherry]
File copied successfully!
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  2.198 s
[INFO] Finished at: 2025-03-28T16:12:33+05:30
[INFO] ------------------------------------------------------------------------

// we can see the list created as [Apple, Banana, Cherry] at line number 133 and also file copied successfully

6. hemavathi@hemavathi-VirtualBox:~/MyMavenGuavaApp$ cat destination.txt
This is a file created using common io dependency


4.
//Create maven based web application 

1. We need to install Apache tomcat to run this application	
2.	
3.	Sudo –i // to go to root directory
4.	Sudo apt update && sudo upgrade –y
5.	cd /tmp
6.	wget https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.100/bin/apache-tomcat-9.0.100.tar.gz
7.	cd ..
8.	cd opt
9.	mkdir tomcat
10.	cd ..
11.	cd tmp
12.	tar file has to be extracted into the tomcat folder so run the below command
13.	sudo tar -xvzf apache-tomcat-9.0.100.tar.gz -C /opt/tomcat --strip-components=1
14.	cd ..
15.	cd opt/tomcat
16.	ls // we can see all files are extracted 
17.	cd conf
18.	ls // we can see server.xml use this file to change the port number from default 8080 to any number say 9090 because Jenkins is running on 8080
19.	gedit server.xml // go to line number 70 and change the portnumber to 9090  <connector port=9090…..> save
20.	we need to create tomcat users as well so add the users in tomcat-users.xml file
21.	gedit tomcat-users.xml  
22.	line 22 add  <user username="admin" password="Admin" roles="manager-gui"/> then save
23.	cd ..
24.	cd bin
25.	ls // we can startup.sh and shutdown,sh to start the tomcat and stop the tomcat 
26.	just try opening the page in browser say localhost:9090  it displays page cannot be displayed so we need to start the tomcat
27.	sh startup.sh
28.	now check in the browser, localhost:9090  tomcat web page is displayed
29.	go to manage app on the right side of the web page it will ask for username and password. Enter the user name and password what we added in the step number 22
30.	The server displays default files along with the user created files if any
31.	 Go back to terminal and type cd ..
32.	Ls // we can see webapp folder this is where we will be copying the war file generated by maven based web application


2. once apache tomcat is installed, create a web application

mvn archetype:generate -DgroupId=com.example -DartifactId=MymavenWebApp01 -DarchetypeArtifactId=maven-archetype-webapp -DinterativeMode=false


3. Add the dependency Servlet app in pom.xml -search for 
<!-- Servlet API for Java EE -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>4.0.1</version>
            <scope>provided</scope>
        </dependency>
        
4.It generates a WAR file instead of JAR file so add the plugin accordingly and we donot need plugin to start the java application plugin because it is an web appication so we write the artifactId of build plugin as <artifactId>maven-war-plugin</artifactId> 

<build>
  <plugins>
  <plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-war-plugin</artifactId>
    <version>3.4.0</version> <!-- Update to latest stable version -->
</plugin>
</plugins>
    <finalName>MymavenWebApp01</finalName>
  </build>
</project>  


//Entire pom.xml is as 
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.example</groupId>
  <artifactId>MymavenWebApp01</artifactId>
  <packaging>war</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>MymavenWebApp01 Maven Webapp</name>
  <url>http://maven.apache.org</url>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
    
    <!-- Servlet API for Java EE -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>4.0.1</version>
            <scope>provided</scope>
        </dependency>
  </dependencies>
  <build>
  <plugins>
  <plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-war-plugin</artifactId>
    <version>3.4.0</version> <!-- Update to latest stable version -->
</plugin>
</plugins>
    <finalName>MymavenWebApp01</finalName> <!-- create a web page with the name MymavenWebapp01, if we want some other name we can chage it -->
  </build>
</project>


//when we use the tree we can see that webapp,index.jsp and web.xml is created instead of App.java
── pom.xml
├── src
│   └── main
│       ├── resources
│       └── webapp
│           ├── index.jsp
│           └── WEB-INF
│               └── web.xml

// check the index.jsp file. It will be a simple web application by default
<html>
<body>
<h2>Hello World!</h2>
</body>
</html>


//mvn clean install

//tree 
we can see the war file inside the target folder
── target
    ├── classes
    ├── maven-archiver
    │   └── pom.properties
    ├── MymavenWebApp01
    │   ├── index.jsp
    │   ├── META-INF
    │   └── WEB-INF
    │       ├── classes
    │       └── web.xml
    └── MymavenWebApp01.war


// now copy this war file manually into apache tomcat webapps folder
goto home->other locations->computer->opt/tomcat/webapps --> paste the war file here

Or use the command as 
cp target/MyMavenWebapp01.war /opt/tomcat/webapps 


// goto browser and type
localhost:9090  
since jenkins is running on 8080, configure a different port number for tomcat while in starting itself because by default tomcat also runs on 8080 
// it displays the MyMavenWebapp.war file just click on the file displays "Hello World"


   5.

/******************to build a gradle project

create a directory MyGradleApp and be in that directory
mkdir MyGradleApp
cd MyGradleApp
gradle init --type java-application
/* show the build.gradle


/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.4.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'

// Apply the application plugin to add support for building an application
apply plugin: 'application'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    compile 'com.google.guava:guava:23.0'

    // Use JUnit test framework
    testCompile 'junit:junit:4.12'
}

// Define the main class for the application
mainClassName = 'App'


// we can add user defined tasks 
task display{
doLast{
println '6A devops class'
}
}


/******to run the gradle project
gradle build
gradle run
Hello World 

//if we have to run user defined task display
gradle display 
6A devops class


PIPELINE
//MAVEN





pipeline {
    agent any  // Use any available agent

    tools {
        maven 'Maven'  // Ensure this matches the name configured in Jenkins
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/Hemavathipcse/MyMavenJenkinsPipeline.git'
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean package'  // Run Maven build
            }
        }

        stage('Test') {
            steps {
                sh 'mvn test'  // Run unit tests
            }
        }

        
        
       
        stage('Run Application') {
            steps {
                // Start the JAR application
                sh 'java -jar target/MyMavenJenkinsPipeline-1.0-SNAPSHOT.jar'
            }
        }

        
    }

    post {
        success {
            echo 'Build and deployment successful!'
        }
        failure {
            echo 'Build failed!'
        }
    }
}













//GRADLE





pipeline {
    agent any  // Use any available agent

    tools {
        gradle 'Gradle'  // Ensure this matches the name configured in Jenkins
        jdk 'JDK'
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/Hemavathipcse/GradleJenkinsPipeline.git'
            }
        }

        stage('Build') {
            steps {
                sh 'gradle build'  // Run Maven build
            }
        }

       stage('Test') {
           steps {
               sh 'gradle test'  // Run unit tests
           }
        }

              
        stage('Run Application') {
            steps {
                // Start the JAR application
                sh 'gradle run'
            }
        }

        
    }

    post {
        success {
            echo 'Build and deployment successful!'
        }
        failure {
            echo 'Build failed!'
        }
    }
}












//SELENIUM





pipeline {
	agent any
	
	tools {
		maven 'MAVEN'
		jdk 'JDK'
	}
	
	stages {
	
		stage('Checkout') {
			steps {
				git branch: 'master', url: 'https://github.com/vsshubh/SeleniumApp.git'
			}
		}
		
		stage('Build') {
			steps {
				sh 'mvn compile package'
			}
		}
		
		stage('Test') {
			steps {
				sh 'mvn test'
			}
		}	
		
		stage('Archive Artifacts') {
			steps {
				archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
			}
		}	
	}
	
	post {
		success {
			echo 'Pipeline Successfull!'
		}
		failure {
			echo 'Pipeline Failed!'
		}
	}
}								











//MAVEN WEBAPP




pipeline {
    agent any

    tools {
        maven 'MAVEN'
        jdk 'JDK'
    }

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/vsshubh/MavenWebPrac.git'
            }
        }

        stage('Build WAR') {
            steps {
                sh 'mvn clean package'
            }
        }
    }







